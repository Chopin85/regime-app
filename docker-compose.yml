services:
  dev:
    container_name: regime-app
    build:
      context: .
      dockerfile: dev.Dockerfile
    env_file:
      - .env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    restart: always
    ports:
      - 3000:3000
    networks:
      - my_network
    depends_on:
      pgadmin:
        condition: service_started
      postgres:
        condition: service_healthy

  prod:
    container_name: regime-app
    build:
      context: .
      dockerfile: prod.Dockerfile
    env_file:
      - .env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    restart: always
    ports:
      - 3000:3000
    networks:
      - my_network
    depends_on:
      postgres:
        condition: service_healthy
      

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PRISMA_SCHEMA_DISABLE_ADVISORY_LOCK: false
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    healthcheck:
      test:
        ["CMD", "pg_isready", "-U", "postgres", "-d", "regimeDB"]
      interval: 2s
      timeout: 10s
      retries: 10
    networks:
      - my_network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user@user.com
      PGADMIN_DEFAULT_PASSWORD: 1234
    volumes:
      - ./pgadmin:/var/lib/pgadmin
    networks:
      - my_network

volumes:
  pgdata: {}
  pgadmin:

  # Add more containers below (nginx, postgres, etc.)

# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
networks:
  my_network:
    driver: bridge
    external: true